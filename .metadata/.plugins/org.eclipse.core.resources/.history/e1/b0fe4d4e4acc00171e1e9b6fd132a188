package lt.and.pac.treerecursion;

import java.util.Scanner;

public class Test {

	public static void main(String[] args) {
		
		int depth;
		
		Node node = new Node(1);
		
		node.nodeList.add(new Node(2));
		node.nodeList.add(new Node(3));
		
		node.nodeList.get(0).nodeList.add(new Node(4));
		node.nodeList.get(1).nodeList.add(new Node(5));
		node.nodeList.get(1).nodeList.add(new Node(6));
		node.nodeList.get(1).nodeList.add(new Node(7));
		
		node.nodeList.get(1).nodeList.get(0).nodeList.add(new Node(8));
		node.nodeList.get(1).nodeList.get(1).nodeList.add(new Node(9));
		node.nodeList.get(1).nodeList.get(2).nodeList.add(new Node(10));
		
		node.nodeList.get(1).nodeList.get(1).nodeList.get(0).nodeList.add(new Node(11));
		
		System.out.println("Tree was built");
		
		System.out.println(node.nodeList.get(0).nodeList.isEmpty());
		System.out.println(node.nodeList.get(0).nodeList.size());
		System.out.println(node.nodeList.get(0).nodeList.get(0).nodeList.size());
		
		int maxDepth = findTreeDepth(0, node);
		System.out.println("Maximum depth is: " + maxDepth);
		
		while (true){
			Scanner in = new Scanner(System.in);
			String str = in.nextLine();
		}

	}
	
	public static int findTreeDepth(int level, Node nodeIn){
		
		System.out.println("findTreeDepth: current node name: " + nodeIn.getName());
		
		if(nodeIn.nodeList.isEmpty() == false){
			level++;
		
			for (Node nodeCurr : nodeIn.nodeList){
				System.out.println("findTreeDepth: for-each: current node name: " + nodeCurr.getName());
				if (nodeCurr.nodeList.size() != 0){
					findTreeDepth(level, nodeCurr);
				}
			}
		} else if (nodeIn.nodeList.isEmpty() == true) {
			level++;
			System.out.println("findTreeDepth: maxLevel is: " + level);
			return level;
		}
		return level;	
		
	}

}
